
import { GoogleGenAI } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const getCharacterDescription = (characterId: string): string => {
    switch (characterId) {
        case 'soda':
            return 'a brave soda can';
        case 'pizza':
            return 'a valiant pizza slice';
        case 'hotdog':
            return 'a courageous hot dog';
        case 'popcorn':
        default:
            return 'a heroic popcorn box';
    }
};


const createGameScenePrompt = (characterDescription: string) => `
A dynamic, high-action scene from a 2.5D side-scroller game.
The main character, ${characterDescription}, is captured mid-jump, transforming into its superhero version.
The character is crafted from ornate white porcelain, adorned with intricate red striped patterns and delicate golden filigree accents. Its surface is highly detailed and reflective.
A vibrant, elegant blue cape, made of shimmering silk, flows majestically behind it as it leaps.
Below the hero, a stylized, monstrous villain made of glossy, dark green ceramic with large, expressive white eyes attempts to intercept it from a simple platform.
The background is a vibrant, slightly out-of-focus game level under a dramatic, dark sky.
The entire scene is illuminated with dramatic cinematic lighting, casting soft shadows and highlighting the reflective ceramic surfaces.
Elegant and regal design, cinematic lighting, ultra-realistic 8k concept art.
`;

export const generateGameSceneImage = async (characterId: string): Promise<string> => {
    try {
        const characterDescription = getCharacterDescription(characterId);
        const prompt = createGameScenePrompt(characterDescription);

        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '16:9',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating image with Gemini API:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to generate image: ${error.message}`);
        }
        throw new Error("An unknown error occurred while generating the image.");
    }
};
